creator_task:
  description: >
    Analyze a text document (.txt) containing math problems designed for elementary school children.
    Based on this analysis, create 5 new math problem statements in English that are similar in terms of content and difficulty level but also incorporate gamification elements.

    The problem statements must:
    - Be presented in a game or challenge context that is attractive to children.
    - Include a narrative or playful scenario that encourages problem-solving.
    - Integrate basic programming concepts that can be implemented as games in Scratch, such as variables, conditionals, and/or loops.
    - Have a correct and deterministic answer.
    - Encourage the integrated and fun learning of math and programming.

    Don`t enumerate the problems. Don`t create subjective questions (they must have an unique answer). The focus is on creating problems that can be transformed into MIT Scratch language, enhancing student engagement.
  expected_output: >
    The output must adhere to the following Pydantic model:

    ```python
    class CreatorItem(BaseModel):
        question: str

    class CreatorResponse(BaseModel):
        items: list[CreatorItem]
    ```

    Ensure that `items` is a list of `CreatorItem` objects, where each contains a single math problem statement as `question`.
  agent: creator

math_solver_task:
  description: >
    This task focuses on generating detailed mathematical solutions for gamified math problems, ensuring both the reasoning process and final solution are clearly presented. For every provided problem statement, the following steps must be performed:

      1. **Validate Clarity and Solvability**:
         - Ensure the problem statement is clear, logically sound, and can be solved mathematically.
         - Verify that the problem structure aligns with its gamified narrative.

      2. **Generate Mathematical Reasoning**:
         - Develop a step-by-step reasoning process to solve the problem.
         - Clearly document each step, including any assumptions or intermediate calculations required to arrive at the solution.

      3. **Produce the Final Solution**:
         - Use the reasoning process to calculate the correct final answer.
         - Present the solution clearly and concisely.
  expected_output: >
    The output must conform to the following Pydantic model:

    ```python
    class MathSolverItem(BaseModel):
        question: str
        math_reasoning: str
        math_solution: str

    class MathSolverResponse(BaseModel):
        items: list[MathSolverItem]
    ```

    Ensure that `items` is a list of `MathSolverItem` objects, where each contains:
      - `question`: The original gamified math problem statement.
      - `math_reasoning`: A detailed explanation of the step-by-step process used to solve the problem.
      - `math_solution`: The correct final answer to the problem.
  agent: math_solver


scratch_solver_task:
  description: >
    This task involves generating simplified Scratch-based implementations for gamified math problems. For each item in the provided list, follow these steps:

      1. **Design and Implement the Scratch Solution**:
         - Generate the reasoning to solve the problem programatically (scratch_reasoning).
         - Implement the solution as an interactive game using the Scratch programming language in a simplified, high-level and well defined JSON block syntax (scratch_solution).
         - Ensure the implementation:
           - Uses only basic Scratch programming blocks, such as variables, conditionals, and loops.
           - Focuses on solving the problem mathematically while aligning with the provided reasoning.
           - Avoids the need for visual details such as sprites or backgrounds.
           - Generates a block of type "say" regardind the final math solution.

      2. **Validate the Implementation**:
         - Ensure that the Scratch implementation:
           - Solves the problem correctly and reaches the math solution using the math reasoning.
           - Is functional, user-friendly, and suitable for elementary school students.
           - Provides clear and appropriate feedback to the player.
           - Is designed in an educational manner that supports learning objectives.

      3. **Double-Check for Quality**:
         - Perform a final review to confirm the implementation is:
           - Correct in terms of functionality and alignment with the problem statement.
           - Simplified but accurate in its representation of Scratch’s block syntax.
           - Engaging and effective as a learning tool.

  expected_output: >
    The output must adhere to the following Pydantic model:

    ```python
    class ScratchSolverItem(BaseModel):
        question: str
        math_reasoning: str
        math_solution: str
        scratch_reasoning: str
        scratch_solution: dict

    class ScratchSolverResponse(BaseModel):
        items: list[ScratchSolverItem]
    ```

    Ensure that `items` is a list of `ScratchSolverItem` objects, where each includes:
      - `question`: The original problem statement.
      - `math_reasoning`: The detailed mathematical reasoning provided to solve the problem.
      - `math_solution`: The correct final answer to the problem (only the answer, not the reasoning).
      - `scratch_reasoning`: A detailed explanation of how the problem was implemented in Scratch, including the logic behind the blocks.
      - `scratch_solution`: A representation of the Scratch implementation in JSON block syntax.

    Examples of ScratchSolverItem:
      ScratchSolverItem(
          question="You are a scientist on a mission to match animal pairs for Noah's Ark! Each pair must equal 2, but a storm scattered them. Use conditionals and loops in Scratch to check and match animals from your variable lists to ensure there are no leftovers. If you start with 3 lions and 1 lioness, how many more lionesses do you need?",
          math_reasoning="We have 3 lions and 1 lioness. For each pair of lions, a corresponding lioness creates one full pair — therefore, each pair has exactly two individual animals. Fulfilling three lion pairs mandates three lionesses; hence we lack 2 more lionesses.,
          math_solution="2 more lionesses",
          scratch_reasoning="Scratch is leveraged to visually walk through the counting of lions with how many lionesses are present until an equal match exists. Commencing by tracking the difference between lions and lionesses; if a mismatch exists, a tally count tracks and eventually signals how many more lionesses are requisite."",
          scratch_solution="{\"variables\": {\"lions\": 3, \"lionesses\": 1, \"neededLionesses\": 0}, \"blocks\": [{\"event\": \"when green flag clicked\", \"actions\": [{\"type\": \"repeat until\", \"condition\": {\"operator\": \"=\", \"operands\": [{\"variable\": \"lions\"}, {\"variable\": \"lionesses\"}]}, \"actions\": [{\"type\": \"change\", \"variable\": \"lionesses\", \"by\": 1}, {\"type\": \"change\", \"variable\": \"neededLionesses\", \"by\": 1}]}, {\"type\": \"say\", \"message\": \"You need\", \"message_variable\": {\"variable\": \"neededLionesses\"}, \"message_end\": \"more lionesses\"}]}]}}"}]}"
      )

  agent: scratch_solver
