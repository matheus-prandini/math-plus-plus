adaptive_creator_task:
  description: >
    ```json
    report = {report}
    ```

    Analyze the provided report with feedbacks on student performance.
    Based on this analysis, create new math problem statements in English that specifically address the identified weaknesses and common errors.

    The problem statements must:
    - Directly target the weaknesses identified in mathematical concepts or programming logic.
    - Be presented in a game or challenge context that is attractive and engaging for children.
    - Include narratives or scenarios that encourage problem-solving and reinforce the correct application of concepts.
    - Integrate basic programming concepts that can be implemented in Scratch, such as variables, conditionals, and loops.
    - Have a correct and deterministic answer, ensuring only one correct outcome.
    - Encourage integrated and fun learning of math and programming, helping students improve in their fragile areas.

    The focus is on creating problems that can be transformed into interactive games in MIT Scratch, enhancing student engagement and addressing specific learning needs.
  expected_output: >
    The output must adhere to the following Pydantic model:

    ```python
    class CreatorItem(BaseModel):
        question: str

    class CreatorResponse(BaseModel):
        items: list[CreatorItem]
    ```

    Ensure that `items` is a list of `CreatorItem` objects, where each contains a single math problem statement as `question`.
  agent: adaptive_creator


math_solver_task:
  description: >
    This task focuses on generating detailed mathematical solutions for gamified math problems, ensuring both the reasoning process and final solution are clearly presented. For every provided problem statement, the following steps must be performed:

      1. **Validate Clarity and Solvability**:
         - Ensure the problem statement is clear, logically sound, and can be solved mathematically.
         - Verify that the problem structure aligns with its gamified narrative.

      2. **Generate Mathematical Reasoning**:
         - Develop a step-by-step reasoning process to solve the problem.
         - Clearly document each step, including any assumptions or intermediate calculations required to arrive at the solution.

      3. **Produce the Final Solution**:
         - Use the reasoning process to calculate the correct final answer.
         - Present the solution clearly and concisely.
  expected_output: >
    The output must conform to the following Pydantic model:

    ```python
    class MathSolverItem(BaseModel):
        question: str
        math_reasoning: str
        math_solution: str

    class MathSolverResponse(BaseModel):
        items: list[MathSolverItem]
    ```

    Ensure that `items` is a list of `MathSolverItem` objects, where each contains:
      - `question`: The original gamified math problem statement.
      - `math_reasoning`: A detailed explanation of the step-by-step process used to solve the problem.
      - `math_solution`: The correct final answer to the problem.
  agent: math_solver


scratch_solver_task:
  description: >
    This task involves generating simplified Scratch-based implementations for gamified math problems. For each item in the provided list, follow these steps:

      1. **Design and Implement the Scratch Solution**:
         - Generate the reasoning to solve the problem programmatically (scratch_reasoning).
         - Implement the solution as an interactive game using the Scratch programming language in a simplified, high-level, and well-defined JSON block syntax (scratch_solution).
         - Ensure the implementation:
           - Uses only basic Scratch programming blocks, such as variables, conditionals, and loops.
           - Focuses on solving the problem mathematically while aligning with the provided reasoning.
           - Avoids the need for visual details such as sprites or backgrounds.
           - Includes a block of type "say" regarding the final math solution.

      2. **Validate the Implementation**:
         - Ensure that the Scratch implementation:
           - Solves the problem correctly and reaches the math solution using the provided reasoning.
           - Is functional, user-friendly, and suitable for elementary school students.
           - Provides clear and appropriate feedback to the player.
           - Is designed in an educational manner that supports learning objectives.

      3. **Double-Check for Quality**:
         - Perform a final review to confirm the implementation is:
           - Correct in terms of functionality and alignment with the problem statement.
           - Simplified but accurate in its representation of Scratchâ€™s block syntax.
           - Engaging and effective as a learning tool.

  expected_output: >
    The output must adhere to the following Pydantic model:

    ```python
    class ScratchSolverItem(BaseModel):
        question: str
        math_reasoning: str
        math_solution: str
        scratch_reasoning: str
        scratch_solution: dict

    class ScratchSolverResponse(BaseModel):
        items: list[ScratchSolverItem]
    ```

    Ensure that `items` is a list of `ScratchSolverItem` objects, where each includes:
      - `question`: The original problem statement.
      - `math_reasoning`: The detailed mathematical reasoning provided to solve the problem.
      - `math_solution`: The correct final answer to the problem (only the answer, not the reasoning).
      - `scratch_reasoning`: A detailed explanation of how the problem was implemented in Scratch, including the logic behind the blocks.
      - `scratch_solution`: A representation of the Scratch implementation in JSON block syntax.

    Example of ScratchSolverItem:
      ScratchSolverItem(
        question="Challenge 2: Join the Space Adventure with Astro the Cat! Astro must collect 10 stars to fix his spaceship. Every time you solve a multiplication problem, Astro collects a star. Solve 3 x 3 to earn a star. Implement this in Scratch using a loop until Astro collects all 10 stars.",
        math_reasoning="To find the product of 3 x 3, multiply the two numbers. The calculation is straightforward: 3 times 3 equals 9.",
        math_solution="3 x 3 = 9",
        scratch_reasoning="In Scratch, Astro collects stars through a loop. Each correct answer to 3 x 3 = 9 increments his star collection until he gathers all 10 stars.",
        scratch_solution={
          "variables": {
            "stars": 0
          },
          "blocks": [
            {
              "event": "when green flag clicked",
              "actions": [
                {
                  "type": "repeat until",
                  "condition": {
                    "operator": "=",
                    "operands": [
                      { "variable": "stars" },
                      10
                    ]
                  },
                  "actions": [
                    {
                      "type": "ask",
                      "question": "What is 3 x 3?"
                    },
                    {
                      "type": "if",
                      "condition": {
                        "operator": "=",
                        "operands": [
                          { "value": "answer" },
                          9
                        ]
                      },
                      "actions": [
                        {
                          "type": "change",
                          "variable": "stars",
                          "by": 1
                        },
                        {
                          "type": "say",
                          "message": "Correct! Astro collects a star."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "say",
                  "message": "Astro has fixed his spaceship with 10 stars!"
                }
              ]
            }
          ]
        }
      )

  agent: scratch_solver

