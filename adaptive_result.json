{
  "items": [
    {
      "question": "In a mystical forest, a squirrel named Squeaky is collecting acorns. He found 15 acorns in the morning and 23 acorns in the afternoon. How many acorns does Squeaky have in total? Use a variable to represent the total number of acorns and create a Scratch program to display the result.",
      "math_reasoning": "To find the total number of acorns Squeaky has, we need to add the acorns he found in the morning (15) to the acorns he found in the afternoon (23). So, we perform the calculation: Total = Morning acorns + Afternoon acorns = 15 + 23. Next, we calculate that: 15 + 23 = 38. By using a variable 'totalAcorns', we can store the result and display it in Scratch.",
      "math_solution": "Squeaky has a total of 38 acorns.",
      "scratch_reasoning": "In Scratch, we create a variable named 'totalAcorns'. When the green flag is clicked, we set 'totalAcorns' to the sum of 15 and 23. Finally, we display the value of 'totalAcorns' using a 'say' block.",
      "scratch_solution": {
        "variables": {
          "totalAcorns": 0
        },
        "blocks": [
          {
            "event": "when green flag clicked",
            "actions": [
              {
                "type": "set",
                "variable": "totalAcorns",
                "to": 15,
                "expression": "15 + 23"
              },
              {
                "type": "say",
                "message": "Squeaky has a total of "
              },
              {
                "type": "join",
                "value1": "totalAcorns",
                "value2": " acorns!"
              }
            ]
          }
        ]
      }
    },
    {
      "question": "A wizard has a magic potion that requires him to mix different colors. For every 2 drops of blue, he needs 3 drops of yellow. If he wants to make a potion with 12 drops of blue, how many drops of yellow does he need? Use conditional statements in Scratch to calculate and display the number of yellow drops.",
      "math_reasoning": "The problem states a mixing ratio of blue to yellow as 2:3. To find out how many drops of yellow are required for 12 drops of blue, we first calculate how many sets of the ratio fit into 12. Since each set consists of 2 drops of blue, we divide: Sets = 12 drops of blue / 2 = 6 sets. Now, for every set, we need 3 drops of yellow, so we multiply: Yellow drops needed = 6 sets * 3 drops of yellow = 18 drops. Using a variable 'yellowDrops', we can store this result in Scratch.",
      "math_solution": "The wizard needs 18 drops of yellow.",
      "scratch_reasoning": "In Scratch, we will create a variable 'yellowDrops'. By calculating the number of sets from 12 blue drops, we find the amount of yellow needed by multiplying sets by 3. We finally display 'yellowDrops' using a 'say' block.",
      "scratch_solution": {
        "variables": {
          "yellowDrops": 0
        },
        "blocks": [
          {
            "event": "when green flag clicked",
            "actions": [
              {
                "type": "set",
                "variable": "sets",
                "to": 12,
                "expression": "12 / 2"
              },
              {
                "type": "set",
                "variable": "yellowDrops",
                "to": "sets * 3"
              },
              {
                "type": "say",
                "message": "The wizard needs "
              },
              {
                "type": "join",
                "value1": "yellowDrops",
                "value2": " drops of yellow."
              }
            ]
          }
        ]
      }
    },
    {
      "question": "In a cupcake shop, Mia bakes 4 cupcakes every hour. If she bakes for 6 hours a day, how many cupcakes will she bake in a day? Create a loop in Scratch to demonstrate the process of counting the cupcakes baked every hour up to 6 hours.",
      "math_reasoning": "Mia bakes a constant rate of 4 cupcakes every hour. To calculate the total cupcakes baked in a day, we multiply the number of cupcakes baked per hour (4) by the number of hours she bakes (6). So the calculation is: Total cupcakes = 4 cupcakes/hour * 6 hours = 24 cupcakes. We can represent this total in a variable 'totalCupcakes' in Scratch.",
      "math_solution": "Mia will bake a total of 24 cupcakes in a day.",
      "scratch_reasoning": "In Scratch, we create a variable named 'totalCupcakes' initialized to 0. We use a loop that runs for 6 iterations, adding 4 cupcakes for each hour. After the loop, we display 'totalCupcakes' using a 'say' block.",
      "scratch_solution": {
        "variables": {
          "totalCupcakes": 0
        },
        "blocks": [
          {
            "event": "when green flag clicked",
            "actions": [
              {
                "type": "repeat",
                "count": 6,
                "actions": [
                  {
                    "type": "change",
                    "variable": "totalCupcakes",
                    "by": 4
                  }
                ]
              },
              {
                "type": "say",
                "message": "Mia will bake a total of "
              },
              {
                "type": "join",
                "value1": "totalCupcakes",
                "value2": " cupcakes in a day!"
              }
            ]
          }
        ]
      }
    },
    {
      "question": "The Treasure Hunt Club has 50 treasure maps, but 8 of them are missing pieces. How many complete treasure maps do they have left? Set up a variable in a Scratch project to calculate and display the number of complete treasure maps.",
      "math_reasoning": "To determine the number of complete treasure maps, we need to subtract the number of incomplete maps (8) from the total number of maps (50). The calculation performed is: Complete maps = Total maps - Missing maps = 50 - 8. This gives us: 50 - 8 = 42. We can store this result in a variable 'completeMaps' in Scratch.",
      "math_solution": "The Treasure Hunt Club has 42 complete treasure maps.",
      "scratch_reasoning": "In Scratch, we will create a variable named 'completeMaps'. We set this variable to the result of 50 - 8 and display its value using a 'say' block.",
      "scratch_solution": {
        "variables": {
          "completeMaps": 0
        },
        "blocks": [
          {
            "event": "when green flag clicked",
            "actions": [
              {
                "type": "set",
                "variable": "completeMaps",
                "to": 50,
                "expression": "50 - 8"
              },
              {
                "type": "say",
                "message": "The Treasure Hunt Club has "
              },
              {
                "type": "join",
                "value1": "completeMaps",
                "value2": " complete treasure maps!"
              }
            ]
          }
        ]
      }
    },
    {
      "question": "A dragon needs 5 apples every day to stay healthy. If he eats 35 apples in total, how many days has he eaten apples? Use division in a Scratch program to calculate the number of days and display the result.",
      "math_reasoning": "To find out how many days the dragon has been eating apples, we divide the total number of apples consumed (35) by the number of apples he eats per day (5). Thus, the calculation is: Days = Total apples / Apples per day = 35 / 5. This results in: 35 / 5 = 7 days. We can use a variable 'daysEaten' to display this result in Scratch.",
      "math_solution": "The dragon has eaten apples for 7 days.",
      "scratch_reasoning": "In Scratch, we will create a variable 'daysEaten'. We calculate this by dividing 35 by 5. The result is then displayed using a 'say' block.",
      "scratch_solution": {
        "variables": {
          "daysEaten": 0
        },
        "blocks": [
          {
            "event": "when green flag clicked",
            "actions": [
              {
                "type": "set",
                "variable": "daysEaten",
                "to": 35,
                "expression": "35 / 5"
              },
              {
                "type": "say",
                "message": "The dragon has eaten apples for "
              },
              {
                "type": "join",
                "value1": "daysEaten",
                "value2": " days!"
              }
            ]
          }
        ]
      }
    },
    {
      "question": "In a video game, a player collects coins. They found 25 coins in the first level and 18 coins in the second level. If it costs 10 coins to buy a shield, how many coins are left after buying the shield? Create conditions in Scratch to determine how many coins remain after the purchase.",
      "math_reasoning": "First, we need to calculate the total number of coins collected by adding the coins from the first level (25) and the second level (18). The calculation is: Total coins = Level 1 coins + Level 2 coins = 25 + 18 = 43 coins. Then, we subtract the cost of the shield (10 coins) from the total coins collected: Remaining coins = Total coins - Cost of shield = 43 - 10 = 33 coins. We can store this result in a variable 'remainingCoins' in Scratch.",
      "math_solution": "The player has 33 coins left after buying the shield.",
      "scratch_reasoning": "In Scratch, we create a variable 'remainingCoins' to hold the total after collecting the coins from both levels and then subtracting the cost of the shield. We display this result using a 'say' block.",
      "scratch_solution": {
        "variables": {
          "remainingCoins": 0
        },
        "blocks": [
          {
            "event": "when green flag clicked",
            "actions": [
              {
                "type": "set",
                "variable": "totalCoins",
                "to": 25,
                "expression": "25 + 18"
              },
              {
                "type": "set",
                "variable": "remainingCoins",
                "to": "totalCoins - 10"
              },
              {
                "type": "say",
                "message": "The player has "
              },
              {
                "type": "join",
                "value1": "remainingCoins",
                "value2": " coins left after buying the shield."
              }
            ]
          }
        ]
      }
    }
  ]
}